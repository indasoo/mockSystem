group 'com.ginda'
version '0.0.1'
def artifactId = "mockSystem"

apply plugin: 'java'
apply plugin: 'maven'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

install {
    repositories.mavenInstaller {
        pom.version = "$project.version"
        pom.artifactId = "$artifactId"
        pom.groupId = "$project.group"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://183.230.40.66:8081/content/repositories/releases/") {
                authentication(userName: "admin", password: "33455432")
            }
            pom.version = "$project.version"
            pom.artifactId = "$artifactId"
            pom.groupId = "$project.group"
        }
    }
}

// 全局配置，对所有工程有效
allprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "maven"

    group = "com.ginda"
    version = "0.1"

    // 全局属性设置
    ext {
        junitVersion = "4.12"
        springVersion = "4.3.0.RELEASE"
        slf4jVersion = "1.7.12"
        logbackVersion = "1.1.3"
        jettyVersion = "6.1.26"
        // java文件编码方式设置为utf-8
        compileJava.options.encoding = 'UTF-8'
        compileTestJava.options.encoding = 'UTF-8'
    }
}

// 所有子工程共有的配置
subprojects {
    // 配置多个maven源
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://mirrors.ibiblio.org/pub/mirrors/maven2" }
    }
    // 默认情况下gradle会选用版本最高的那个依赖，有时候会带来问题
    configurations.all {
        // 有版本冲突的时候强制使用指定的版本，对于相关依赖也同样有效
        resolutionStrategy.force(
                "org.springframework:spring-core:${springVersion}",
        )
    }
    // 公共依赖配置
    dependencies {

        compile(
                "org.apache.tuscany.sca:tuscany-sca-api:2.0.1",
                "org.apache.tuscany.sca:tuscany-core-spi:2.0.1",
                "org.apache.tuscany.sca:tuscany-assembly:2.0.1",
                "org.apache.tuscany.sca:tuscany-host-http:2.0.1",
                "org.apache.tuscany.sca:tuscany-host-jetty:2.0.1",
        )

        compile(
                "org.mortbay.jetty:jetty:${jettyVersion}",
                "org.mortbay.jetty:jetty-util:${jettyVersion}"
        )

        compile(
                // 日志 采用slf4j 日志实现为logback
                "org.slf4j:slf4j-api:${slf4jVersion}",
                "org.slf4j:jul-to-slf4j:${slf4jVersion}",
                "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
                "org.slf4j:log4j-over-slf4j:${slf4jVersion}",
                "ch.qos.logback:logback-core:${logbackVersion}",
                "ch.qos.logback:logback-classic:${logbackVersion}",
                "ch.qos.logback:logback-access:${logbackVersion}",
        )

        testCompile(
                "junit:junit:${junitVersion}",
                "org.springframework:spring-test:${springVersion}",

        )
    }
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile (
            // 日志 采用slf4j 日志实现为logbac

            'org.apache.commons:commons-lang3:3.4',
    )

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}